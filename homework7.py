# -*- coding: utf-8 -*-
"""HOMEWORK7

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sauW1tXjv2TwBGqXehddX-DwmHoA5MsA
"""

from airflow import DAG
from airflow.decorators import task
from airflow.providers.snowflake.hooks.snowflake import SnowflakeHook
from airflow.providers.snowflake.operators.snowflake import SnowflakeOperator
from datetime import datetime

def return_snowflake_conn():
    # Initialize the SnowflakeHook using your connection ID
    hook = SnowflakeHook(snowflake_conn_id='snowflake_conn')
    return hook.get_conn().cursor()

# Step 1: ETL DAG for Importing Tables
with DAG(
    dag_id='Homework_7',
    start_date=datetime(2024, 10, 20),
    catchup=False,
    schedule_interval=None,
    tags=['ETL']
) as etl_dag:

    @task
    def create_tables():
        cur = return_snowflake_conn()
        try:
            # Create user_session_channel table
            cur.execute("""
                CREATE TABLE IF NOT EXISTS dev.raw_data.user_session_channel (
                    userId int not NULL,
                    sessionId varchar(32) primary key,
                    channel varchar(32) default 'direct'
                );
            """)

            # Create session_timestamp table
            cur.execute("""
                CREATE TABLE IF NOT EXISTS dev.raw_data.session_timestamp (
                    sessionId varchar(32) primary key,
                    ts timestamp
                );
            """)
            print("Tables created successfully")
        finally:
            cur.close()

    create_tables()

# Step 2: ELT DAG for Creating a Joined Table
with DAG(
    dag_id='snowflake_create_session_summary_dag',
    start_date=datetime(2024, 10, 23),
    catchup=False,
    schedule_interval=None,
    tags=['ELT']
) as elt_dag:

    @task
    def create_session_summary():
        cur = return_snowflake_conn()
        try:
            # Create session_summary table by joining user_session_channel and session_timestamp
            cur.execute("""
                CREATE TABLE IF NOT EXISTS dev.analytics.session_summary AS
                SELECT
                    u.userId,
                    u.sessionId,
                    s.ts,
                    u.channel
                FROM
                    dev.raw_data.user_session_channel u
                JOIN
                    dev.raw_data.session_timestamp s
                ON
                    u.sessionId = s.sessionId
                WHERE
                    u.sessionId NOT IN (
                        SELECT sessionId FROM dev.analytics.session_summary
                    );
            """)
            print("session_summary table created successfully")
        finally:
            cur.close()

    create_session_summary()